from utils.database import add_bulk_problems, init_db
import random
from fractions import Fraction
import math
import logging

logger = logging.getLogger(__name__)

def generate_geometry_problem(exam_type: str, level: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
    problems = [
        {
            "topic": "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
            "text": """üìê *–ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫*

–í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ ABC:
‚Ä¢ ‚à†C = 90¬∞
‚Ä¢ AC = 4
‚Ä¢ BC = 3

–ù–∞–π–¥–∏—Ç–µ sin(A).""",
            "answer": "0.6",
            "answer_type": "float",
            "exam_type": exam_type,
            "level": level,
            "complexity": 2,
            "hint": "sin(A) = –ø—Ä–æ—Ç–∏–≤–æ–ª–µ–∂–∞—â–∏–π –∫–∞—Ç–µ—Ç / –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞ = BC/AB",
            "solution": """1) –ü–æ —Ç–µ–æ—Ä–µ–º–µ –ü–∏—Ñ–∞–≥–æ—Ä–∞ –Ω–∞–π–¥–µ–º AB:
AB¬≤ = AC¬≤ + BC¬≤ = 16 + 9 = 25
AB = 5
2) sin(A) = BC/AB = 3/5 = 0.6"""
        },
        {
            "topic": "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
            "text": """üìê *–ó–∞–¥–∞—á–∞ –Ω–∞ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞*

–í —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ ABC:
‚Ä¢ AB = 6
‚Ä¢ –í—ã—Å–æ—Ç–∞ –∫ —Å—Ç–æ—Ä–æ–Ω–µ AB —Ä–∞–≤–Ω–∞ 4

–ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞.""",
            "answer": "12",
            "answer_type": "integer",
            "exam_type": exam_type,
            "level": level,
            "complexity": 1,
            "hint": "S = ¬Ω * –æ—Å–Ω–æ–≤–∞–Ω–∏–µ * –≤—ã—Å–æ—Ç–∞",
            "solution": "S = ¬Ω * 6 * 4 = 12"
        }
    ]
    return random.choice(problems)

def generate_trigonometry_problem(exam_type: str, level: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –ø–æ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏"""
    angles = {
        0: {"sin": "0", "cos": "1"},
        30: {"sin": "1/2", "cos": "‚àö3/2"},
        45: {"sin": "‚àö2/2", "cos": "‚àö2/2"},
        60: {"sin": "‚àö3/2", "cos": "1/2"},
        90: {"sin": "1", "cos": "0"}
    }
    
    angle = random.choice(list(angles.keys()))
    func = random.choice(['sin', 'cos'])
    answer = angles[angle][func]

    return {
        "topic": "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è",
        "text": f"üîÑ –í—ã—á–∏—Å–ª–∏—Ç–µ {func}({angle}¬∞)",
        "answer": answer,
        "answer_type": "trig",
        "exam_type": exam_type,
        "level": level,
        "complexity": 2,
        "hint": f"–í—Å–ø–æ–º–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {func}({angle}¬∞)",
        "solution": f"–¢–∞–±–ª–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {func}({angle}¬∞) = {answer}"
    }

def generate_logarithm_problem(exam_type: str, level: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ª–æ–≥–∞—Ä–∏—Ñ–º—ã"""
    base = random.choice([2, 3, 5, 10])
    power = random.randint(1, 4)
    number = base ** power

    return {
        "topic": "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã",
        "text": f"üìâ –í—ã—á–∏—Å–ª–∏—Ç–µ log_{base}({number})",
        "answer": str(power),
        "answer_type": "integer",
        "exam_type": exam_type,
        "level": level,
        "complexity": 2,
        "hint": f"–ü–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é: log_a(b) = x, –µ—Å–ª–∏ a^x = b",
        "solution": f"{base}^{power} = {number}, –ø–æ—ç—Ç–æ–º—É log_{base}({number}) = {power}"
    }

def generate_exponential_problem(exam_type: str, level: str) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"""
    base = random.choice([2, 3, 5])
    power = random.randint(-2, 3)
    result = base ** power

    return {
        "topic": "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è",
        "text": f"üìà –í—ã—á–∏—Å–ª–∏—Ç–µ {base}^{power}",
        "answer": str(result),
        "answer_type": "integer",
        "exam_type": exam_type,
        "level": level,
        "complexity": 2,
        "hint": f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å",
        "solution": f"{base}^{power} = {result}"
    }

def generate_problems():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        init_db()
        problems = []
        
        exam_levels = [
            ("–ï–ì–≠", "–ø—Ä–æ—Ñ–∏–ª—å"),
            ("–ï–ì–≠", "–±–∞–∑–∞"),
            ("–û–ì–≠", "–±–∞–∑–∞")
        ]
        
        generators = [
            generate_geometry_problem,
            generate_trigonometry_problem,
            generate_logarithm_problem,
            generate_exponential_problem
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 –∑–∞–¥–∞—á –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        for exam_type, level in exam_levels:
            for generator in generators:
                for _ in range(10):
                    problem = generator(exam_type, level)
                    problems.append(problem)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_bulk_problems(problems)
        
        logger.info(f"Generated {len(problems)} problems")
        print(f"\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á:")
        for exam_type, level in exam_levels:
            count = sum(1 for p in problems if p['exam_type'] == exam_type and p['level'] == level)
            print(f"- {exam_type} ({level}): {count} –∑–∞–¥–∞—á")
            
    except Exception as e:
        logger.error(f"Error generating problems: {e}")
        raise

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    generate_problems()