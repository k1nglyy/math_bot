from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.database import get_random_problem, update_user_stats
import logging

router = Router()
logger = logging.getLogger(__name__)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéì –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω"), KeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True  # –°–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
)

exam_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ï–ì–≠"), KeyboardButton(text="–û–ì–≠")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

level_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–∞–∑–∞"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)
class UserState(StatesGroup):
    choosing_exam = State()
    choosing_level = State()
    solving_task = State()
@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            "üìñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MathExamBot!*\n"
            "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n\n"
            "‚ùó *–ö–∞–∫ –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã:*\n"
            "- –ß–∏—Å–ª–∞: **12** –∏–ª–∏ **5.67**\n"
            "- –î—Ä–æ–±–∏: **3/4**\n"
            "- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: **2; -5**\n"
            "- –¢–µ–∫—Å—Ç: –ø–∏—à–∏—Ç–µ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ!",
            reply_markup=main_menu,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "üéì –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω")
async def choose_exam(message: types.Message, state: FSMContext):
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:", reply_markup=exam_menu)
    await state.set_state(UserState.choosing_exam)

@router.message(lambda message: message.text in ["–ï–ì–≠", "–û–ì–≠"], UserState.choosing_exam)
async def set_exam(message: types.Message, state: FSMContext):
    exam_type = "–ï–ì–≠" if message.text == "–ï–ì–≠" else "–û–ì–≠"
    await state.update_data(exam_type=exam_type)

    if exam_type == "–û–ì–≠":
        await state.update_data(level="–±–∞–∑–∞")
        await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω –û–ì–≠ (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å).\n–ù–∞–∂–º–∏—Ç–µ 'üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!", reply_markup=main_menu)
        await state.set_state(UserState.solving_task)
    else:
        await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_menu)
        await state.set_state(UserState.choosing_level)

@router.message(lambda message: message.text in ["–ë–∞–∑–∞", "–ü—Ä–æ—Ñ–∏–ª—å"], UserState.choosing_level)
async def set_level(message: types.Message, state: FSMContext):
    level = message.text.lower()
    await state.update_data(level=level)
    data = await state.get_data()
    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω {data['exam_type']} ({level}).\n–ù–∞–∂–º–∏—Ç–µ 'üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!",
        reply_markup=main_menu
    )
    await state.set_state(UserState.solving_task)

@router.message(lambda message: message.text == "üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É", UserState.solving_task)
async def send_task(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        problem = get_random_problem(data['exam_type'], data.get('level', '–±–∞–∑–∞'))

        if problem:
            await state.update_data(current_problem=problem)
            await message.answer(
                f"üîç *{problem['topic']} ({problem['exam_type']}, {problem['level']})*\n\n"
                f"{problem['text']}\n\n"
                f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                parse_mode="Markdown"
            )
        else:
            await message.answer("üò¢ –ó–∞–¥–∞—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω –∏ —É—Ä–æ–≤–µ–Ω—å.\n"
        "2. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–∞–π—Ç–µ –∏—Ö.\n"
        "3. *–§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*\n"
        "   - –ß–∏—Å–ª–∞: **5**, **3.14**\n"
        "   - –î—Ä–æ–±–∏: **2/3**\n"
        "   - –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥—Ä–æ–±–∏: **0.33** (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ) –∏–ª–∏ **1/3**\n"
        "   - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–π: **1; -2**\n\n"
        "‚ùó –ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –û—Ç–≤–µ—Ç 0.3333... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 0.33 –∏–ª–∏ 1/3\n"
        "- –û—Ç–≤–µ—Ç 2.666... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 2.67 –∏–ª–∏ 8/3",
        parse_mode="Markdown"
    )


@router.message(UserState.solving_task)
async def check_answer(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        problem = data.get('current_problem')
        if not problem:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –º–µ–Ω—é!")
            return
        user_answer = message.text.strip().replace(",", ".").lower()
        correct_answers = problem['answer'].split("; ")
        try:
            user_parts = sorted([float(part.strip()) for part in user_answer.split(";")])
            correct_parts = sorted([float(part.strip()) for part in correct_answers])
            is_correct = all(
                abs(user - correct) < 0.01
                for user, correct in zip(user_parts, correct_parts)
            )
        except ValueError:
            is_correct = user_answer in correct_answers

        if is_correct:
            update_user_stats(message.from_user.id)
            await message.answer("‚úÖ *–í–µ—Ä–Ω–æ!* –ú–æ–ª–æ–¥–µ—Ü! üòä", parse_mode="Markdown")
        else:
            hint_text = (
                f"‚ùå *–ù–µ–≤–µ—Ä–Ω–æ.* –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{problem['answer']}`\n\n"
                f"{problem['hint']}"
            )
            await message.answer(hint_text, parse_mode="Markdown")

        await send_task(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä—ã: 3; 2.5; 1/3")
@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    stats = get_user_stats(message.from_user.id)
    await message.answer(
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n–†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: **{stats['solved']}**\n",
        parse_mode="Markdown"
    )