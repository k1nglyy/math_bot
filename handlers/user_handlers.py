from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from utils.database import (
    save_user_exam,
    get_user_difficulty,
    update_user_stats,
    get_user_stats
)
from utils.problem_bank import ProblemBank

router = Router()
problem_bank = ProblemBank()
logger = logging.getLogger(__name__)


class Form(StatesGroup):
    exam_select = State()
    topic_select = State()
    solving = State()


@router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await state.clear()
        await message.answer(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–û–ì–≠"), KeyboardButton(text="–ï–ì–≠")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.exam_select)
    except Exception as e:
        logger.error(f"Start error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(Form.exam_select, F.text.in_(["–û–ì–≠", "–ï–ì–≠"]))
async def handle_exam_select(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    try:
        await save_user_exam(message.from_user.id, message.text)
        await state.update_data(exam=message.text)

        await message.answer(
            "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ê–ª–≥–µ–±—Ä–∞"), KeyboardButton(text="–ì–µ–æ–º–µ—Ç—Ä–∏—è")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.topic_select)
    except Exception as e:
        logger.error(f"Exam select error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞")


@router.message(Form.topic_select, F.text.in_(["–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è"]))
async def handle_topic_select(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    try:
        user_data = await state.get_data()
        exam = user_data.get("exam", "–û–ì–≠")
        difficulty = await get_user_difficulty(message.from_user.id)

        problem = problem_bank.get_problem(exam, message.text, difficulty)

        await state.update_data(current_problem=problem)
        await message.answer(
            f"üìù –ó–∞–¥–∞—á–∞ ({exam}, {message.text}):\n{problem['question']}",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.solving)
    except Exception as e:
        logger.error(f"Topic select error: {str(e)}")
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        await state.clear()


@router.message(Form.solving)
async def handle_solution(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è"""
    try:
        user_data = await state.get_data()
        problem = user_data["current_problem"]

        if message.text.strip() == problem["answer"]:
            topic = "–ê–ª–≥–µ–±—Ä–∞" if "–ê–ª–≥–µ–±—Ä–∞" in problem["question"] else "–ì–µ–æ–º–µ—Ç—Ä–∏—è"
            await update_user_stats(message.from_user.id, topic)
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞:")
            await handle_topic_select(message, state)
        else:
            await message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {problem['answer']}\n"
                f"üìö –†–∞–∑–±–æ—Ä:\n{problem['solution']}"
            )
    except Exception as e:
        logger.error(f"Solution check error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è")


@router.message(Command("stats"))
async def handle_stats(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = await get_user_stats(message.from_user.id)
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–≠–∫–∑–∞–º–µ–Ω: {stats.get('exam', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
            f"–†–µ—à–µ–Ω–æ –∞–ª–≥–µ–±—Ä—ã: {stats.get('algebra', 0)}\n"
            f"–†–µ—à–µ–Ω–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {stats.get('geometry', 0)}\n"
            f"–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {stats.get('difficulty', 1)}"
        )
        await message.answer(text)
    except Exception as e:
        logger.error(f"Stats error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Form.topic_select, F.text.in_(["–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä–∏—è"]))
async def handle_topic_select(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        user_id = message.from_user.id
        exam = user_data.get("exam", "–û–ì–≠")
        topic = message.text
        logger.info(f"User {user_id} selected: {exam}/{topic}")
        difficulty = await get_user_difficulty(user_id)
        logger.debug(f"Current difficulty: {difficulty}")
        problem = problem_bank.get_problem(exam, topic, difficulty)
        if not problem:
            raise ValueError("Problem generation failed")
        await state.update_data(current_problem=problem)
        await message.answer(
            f"üìù *–ó–∞–¥–∞—á–∞ ({exam}, {topic}):*\n{problem['question']}",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.solving)

    except Exception as e:
        logger.error(f"Topic selection error: {str(e)}", exc_info=True)
        await message.answer(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "1. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª\n"
            "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ\n"
            "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
        await state.clear()