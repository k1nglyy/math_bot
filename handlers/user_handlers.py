from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.database import (
    get_random_problem,
    update_user_stats,
    get_user_stats,
    get_user_achievements,
    check_achievements
)
import logging

router = Router()
logger = logging.getLogger(__name__)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéì –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω"), KeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True  # –°–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
)

exam_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ï–ì–≠"), KeyboardButton(text="–û–ì–≠")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

level_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–∞–∑–∞"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


class UserState(StatesGroup):
    choosing_exam = State()
    choosing_level = State()
    solving_task = State()


@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            "üìñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MathExamBot!*\n"
            "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n\n"
            "‚ùó *–ö–∞–∫ –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã:*\n"
            "- –ß–∏—Å–ª–∞: **12** –∏–ª–∏ **5.67**\n"
            "- –î—Ä–æ–±–∏: **3/4**\n"
            "- –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: **2; -5**\n"
            "- –¢–µ–∫—Å—Ç: –ø–∏—à–∏—Ç–µ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ!",
            reply_markup=main_menu,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(lambda message: message.text == "üéì –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω")
async def choose_exam(message: types.Message, state: FSMContext):
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:", reply_markup=exam_menu)
    await state.set_state(UserState.choosing_exam)


@router.message(lambda message: message.text in ["–ï–ì–≠", "–û–ì–≠"], UserState.choosing_exam)
async def set_exam(message: types.Message, state: FSMContext):
    exam_type = "–ï–ì–≠" if message.text == "–ï–ì–≠" else "–û–ì–≠"
    await state.update_data(exam_type=exam_type)

    if exam_type == "–û–ì–≠":
        await state.update_data(level="–±–∞–∑–∞")
        await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω –û–ì–≠ (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å).\n–ù–∞–∂–º–∏—Ç–µ 'üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!", reply_markup=main_menu)
        await state.set_state(UserState.solving_task)
    else:
        await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_menu)
        await state.set_state(UserState.choosing_level)


@router.message(lambda message: message.text in ["–ë–∞–∑–∞", "–ü—Ä–æ—Ñ–∏–ª—å"], UserState.choosing_level)
async def set_level(message: types.Message, state: FSMContext):
    level = message.text.lower()
    await state.update_data(level=level)
    data = await state.get_data()
    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω {data['exam_type']} ({level}).\n–ù–∞–∂–º–∏—Ç–µ 'üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!",
        reply_markup=main_menu
    )
    await state.set_state(UserState.solving_task)


@router.message(lambda message: message.text == "üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É", UserState.solving_task)
async def send_task(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        problem = get_random_problem(data['exam_type'], data.get('level', '–±–∞–∑–∞'))

        if problem:
            await state.update_data(current_problem=problem)
            await message.answer(
                f"üîç *{problem['topic']} ({problem['exam_type']}, {problem['level']})*\n\n"
                f"{problem['text']}\n\n"
                f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                parse_mode="Markdown"
            )
        else:
            await message.answer("üò¢ –ó–∞–¥–∞—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω –∏ —É—Ä–æ–≤–µ–Ω—å.\n"
        "2. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–∞–π—Ç–µ –∏—Ö.\n"
        "3. *–§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*\n"
        "   - –ß–∏—Å–ª–∞: **5**, **3.14**\n"
        "   - –î—Ä–æ–±–∏: **2/3**\n"
        "   - –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥—Ä–æ–±–∏: **0.33** (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ) –∏–ª–∏ **1/3**\n"
        "   - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–π: **1; -2**\n\n"
        "‚ùó –ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –û—Ç–≤–µ—Ç 0.3333... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 0.33 –∏–ª–∏ 1/3\n"
        "- –û—Ç–≤–µ—Ç 2.666... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 2.67 –∏–ª–∏ 8/3",
        parse_mode="Markdown"
    )


@router.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    current_state = await state.get_state()

    if current_state == UserState.choosing_level.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞
        await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:", reply_markup=exam_menu)
        await state.set_state(UserState.choosing_exam)
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stats = get_user_stats(message.from_user.id)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_attempts = stats.get('total_attempts', 0)
        solved = stats.get('solved', 0)
        accuracy = (solved / total_attempts * 100) if total_attempts > 0 else 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}\n"
            f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {solved}\n"
            f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if topics := stats.get('topics'):
            stats_text += "\n\nüìö *–ü–æ —Ç–µ–º–∞–º:*"
            for topic, count in topics.items():
                stats_text += f"\n‚Ä¢ {topic}: {count}"

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(lambda message: message.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        achievements = get_user_achievements(message.from_user.id)

        if not achievements:
            await message.answer(
                "üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
                "–†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
        text = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
        for ach in achievements:
            text += f"{ach['icon']} *{ach['name']}*\n"
            text += f"_{ach['description']}_\n"
            text += f"–ü–æ–ª—É—á–µ–Ω–æ: {ach['obtained_at']}\n\n"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error showing achievements: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")


def normalize_number(value):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float
        num = float(value)
        # –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ int
        if num.is_integer():
            return int(num)
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º float —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return round(num, 4)
    except ValueError:
        return value


def check_answers_equality(user_answer, correct_answer, problem_type):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    try:
        # –î–ª—è –∑–∞–¥–∞—á —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        if ";" in str(correct_answer):
            user_parts = [p.strip() for p in str(user_answer).split(";")]
            correct_parts = [p.strip() for p in str(correct_answer).split(";")]

            if len(user_parts) != len(correct_parts):
                return False

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            user_parts = sorted([normalize_number(p) for p in user_parts])
            correct_parts = sorted([normalize_number(p) for p in correct_parts])

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω–∏–π
            for u, c in zip(user_parts, correct_parts):
                if not check_single_answer(u, c, problem_type):
                    return False
            return True

        # –î–ª—è –∑–∞–¥–∞—á —Å –æ–¥–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º
        return check_single_answer(user_answer, correct_answer, problem_type)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False


def check_single_answer(user_value, correct_value, problem_type):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        user_num = normalize_number(user_value)
        correct_num = normalize_number(correct_value)

        # –ï—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã–µ
        if isinstance(user_num, (int, float)) and isinstance(correct_num, (int, float)):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            tolerance = {
                "–ì–µ–æ–º–µ—Ç—Ä–∏—è": 0.1,
                "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π": 0.01,
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": 0.01
            }.get(problem_type, 0.01)

            return abs(float(user_num) - float(correct_num)) <= tolerance

        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        return str(user_value).strip().lower() == str(correct_value).strip().lower()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False


@router.message(UserState.solving_task)
async def check_answer(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(message)
        return

    try:
        data = await state.get_data()
        problem = data.get('current_problem')
        if not problem:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –º–µ–Ω—é!")
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answer = message.text.strip().replace(',', '.')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = check_answers_equality(
            user_answer,
            problem['answer'],
            problem['topic']
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        update_user_stats(message.from_user.id, is_correct)

        if is_correct:
            await message.answer("‚úÖ *–í–µ—Ä–Ω–æ!* –ú–æ–ª–æ–¥–µ—Ü! üòä", parse_mode="Markdown")
        else:
            hint_text = (
                f"‚ùå *–ù–µ–≤–µ—Ä–Ω–æ.*\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {problem['answer']}\n\n"
                f"{problem['hint']}"
            )
            await message.answer(hint_text, parse_mode="Markdown")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        await show_stats(message)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        await send_task(message, state)

        # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = check_achievements(message.from_user.id)
        if new_achievements:
            achievements_text = "üéâ *–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
            for ach in new_achievements:
                achievements_text += f"{ach['icon']} *{ach['name']}*\n"
                achievements_text += f"_{ach['description']}_\n\n"
            await message.answer(achievements_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: 50\n"
            "- –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏: 50.24\n"
            "- –î—Ä–æ–±–∏: 1/2\n"
            "- –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤: 2; -5\n"
            "- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: 0.5 –∏–ª–∏ 1/2"
        )