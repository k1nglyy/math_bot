from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.database import (
    get_problem,
    update_user_stats,
    get_user_stats,
    get_user_achievements,
    check_achievements,
    get_adaptive_problem
)
import logging
from datetime import datetime
from typing import List, Dict
import random

router = Router()
logger = logging.getLogger(__name__)

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö –∏–∫–æ–Ω–∫–∏
TOPIC_ICONS = {
    "–ê–ª–≥–µ–±—Ä–∞": "üìä",
    "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "üìê",
    "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π": "üé≤",
    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìà",
    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è": "üìà",
    "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã": "üìâ",
    "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è": "üîÑ"
}

# –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω"), KeyboardButton(text="‚ú® –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí° –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"), KeyboardButton(text="üìö –¢–µ–º—ã")]
    ],
    resize_keyboard=True
)

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é —Ç–µ–º
topics_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ê–ª–≥–µ–±—Ä–∞"), KeyboardButton(text="üìê –ì–µ–æ–º–µ—Ç—Ä–∏—è")],
        [KeyboardButton(text="üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ"), KeyboardButton(text="üìâ –õ–æ–≥–∞—Ä–∏—Ñ–º—ã")],
        [KeyboardButton(text="üîÑ –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è"), KeyboardButton(text="üé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

exam_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ï–ì–≠"), KeyboardButton(text="üìñ –û–ì–≠")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

level_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìò –ë–∞–∑–∞"), KeyboardButton(text="üìó –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)


class UserState(StatesGroup):
    choosing_exam = State()
    choosing_level = State()
    solving_task = State()


class TaskManager:
    def __init__(self):
        self._last_topic = None
        self._used_tasks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–µ–º–∞–º

    def get_new_task(self, exam_type: str, level: str) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —Ç–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ –∏ —É—Ä–æ–≤–Ω—è
            available_problems = get_adaptive_problem(exam_type, level)

            if not available_problems:
                return None

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º
            problems_by_topic = {}
            for problem in available_problems:
                topic = problem['topic']
                if topic not in problems_by_topic:
                    problems_by_topic[topic] = []
                problems_by_topic[topic].append(problem)

            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É, –æ—Ç–ª–∏—á–Ω—É—é –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
            available_topics = list(problems_by_topic.keys())
            if self._last_topic in available_topics:
                available_topics.remove(self._last_topic)

            if not available_topics:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ç–µ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                self._last_topic = None
                available_topics = list(problems_by_topic.keys())

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
            new_topic = random.choice(available_topics)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
            if new_topic not in self._used_tasks:
                self._used_tasks[new_topic] = set()

            # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
            available_tasks = [
                task for task in problems_by_topic[new_topic]
                if task['id'] not in self._used_tasks[new_topic]
            ]

            if not available_tasks:  # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
                self._used_tasks[new_topic].clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
                available_tasks = problems_by_topic[new_topic]

            task = random.choice(available_tasks)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self._used_tasks[new_topic].add(task['id'])
            self._last_topic = new_topic

            return task

        except Exception as e:
            logger.error(f"Error in get_new_task: {e}")
            return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TaskManager
task_manager = TaskManager()

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–∞–¥–∞—á –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
geometry_problems = [
    # –ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è
    {
        "id": "p1",
        "topic": "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
        "category": "–ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è",
        "exam_type": "–ï–ì–≠",
        "level": "–ø—Ä–æ—Ñ–∏–ª—å",
        "complexity": 2,
        "text": """üìè *–ó–∞–¥–∞—á–∞ –Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å*

–í –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Ä–∞–¥–∏—É—Å–∞ 13:
‚Ä¢ –•–æ—Ä–¥–∞ AB = 24
‚Ä¢ –¢–æ—á–∫–∞ C –ª–µ–∂–∏—Ç –Ω–∞ –º–µ–Ω—å—à–µ–π –¥—É–≥–µ AB
‚Ä¢ ‚à†ACB = 60¬∞

–ù–∞–π–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –¥–æ —Ö–æ—Ä–¥—ã AB.""",
        "answer": "5",
        "hints": [
            "–í—Å–ø–æ–º–Ω–∏—Ç–µ —Ç–µ–æ—Ä–µ–º—É –æ —Å–≤—è–∑–∏ —Ä–∞–¥–∏—É—Å–∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ö–æ—Ä–¥—ã",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞",
            "R¬≤ = h¬≤ + (AB/2)¬≤"
        ],
        "solution": """1) –ü—É—Å—Ç—å h - –∏—Å–∫–æ–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
2) –ü–æ —Ç–µ–æ—Ä–µ–º–µ –æ —Å–≤—è–∑–∏ —Ä–∞–¥–∏—É—Å–∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ö–æ—Ä–¥—ã:
   R¬≤ = h¬≤ + (AB/2)¬≤
3) 13¬≤ = h¬≤ + 12¬≤
4) h¬≤ = 169 - 144 = 25
5) h = 5"""
    },

    # –°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è
    {
        "id": "s1",
        "topic": "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
        "category": "–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è",
        "exam_type": "–ï–ì–≠",
        "level": "–ø—Ä–æ—Ñ–∏–ª—å",
        "complexity": 3,
        "text": """üìê *–ó–∞–¥–∞—á–∞ –Ω–∞ –ø–∏—Ä–∞–º–∏–¥—É*

–í –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–æ–π –ø–∏—Ä–∞–º–∏–¥–µ SABCD:
‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è AC = 8
‚Ä¢ –ë–æ–∫–æ–≤–æ–µ —Ä–µ–±—Ä–æ SA = 5
‚Ä¢ –£–≥–æ–ª –º–µ–∂–¥—É SA –∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –æ—Å–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–≤–µ–Ω 60¬∞

–ù–∞–π–¥–∏—Ç–µ –æ–±—ä–µ–º –ø–∏—Ä–∞–º–∏–¥—ã.""",
        "answer": "32",
        "hints": [
            "–í—ã—Å–æ—Ç–∞ –ø–∏—Ä–∞–º–∏–¥—ã = SA * sin(60¬∞)",
            "–ü–ª–æ—â–∞–¥—å –æ—Å–Ω–æ–≤–∞–Ω–∏—è = AC¬≤",
            "V = ‚Öì * S_–æ—Å–Ω * h"
        ],
        "solution": """1) h = SA * sin(60¬∞) = 5 * ‚àö3/2
2) S_–æ—Å–Ω = 8¬≤ = 64
3) V = ‚Öì * 64 * (5‚àö3/2) = 32"""
    },

    # –í–µ–∫—Ç–æ—Ä—ã
    {
        "id": "v1",
        "topic": "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
        "category": "–í–µ–∫—Ç–æ—Ä—ã",
        "exam_type": "–ï–ì–≠",
        "level": "–ø—Ä–æ—Ñ–∏–ª—å",
        "complexity": 3,
        "text": """‚û°Ô∏è *–ó–∞–¥–∞—á–∞ –Ω–∞ –≤–µ–∫—Ç–æ—Ä—ã*

–í –∫—É–±–µ ABCDA‚ÇÅB‚ÇÅC‚ÇÅD‚ÇÅ:
‚Ä¢ –†–µ–±—Ä–æ –∫—É–±–∞ —Ä–∞–≤–Ω–æ 2
‚Ä¢ –¢–æ—á–∫–∞ M - —Å–µ—Ä–µ–¥–∏–Ω–∞ —Ä–µ–±—Ä–∞ AA‚ÇÅ
‚Ä¢ –¢–æ—á–∫–∞ K - —Å–µ—Ä–µ–¥–∏–Ω–∞ —Ä–µ–±—Ä–∞ CC‚ÇÅ

–ù–∞–π–¥–∏—Ç–µ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ AM –∏ BK.""",
        "answer": "2",
        "hints": [
            "–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
            "–ù–∞–π–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ A, M, B, K",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É–ª—É —Å–∫–∞–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
        ],
        "solution": """1) A(0,0,0), B(2,0,0), C(2,2,0)
2) M(0,0,1), K(2,2,1)
3) AM = (0,0,1), BK = (0,2,1)
4) AM¬∑BK = 0 + 0 + 1 = 2"""
    },

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    {
        "id": "k1",
        "topic": "–ì–µ–æ–º–µ—Ç—Ä–∏—è",
        "category": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
        "exam_type": "–ï–ì–≠",
        "level": "–ø—Ä–æ—Ñ–∏–ª—å",
        "complexity": 2,
        "text": """üìç *–ó–∞–¥–∞—á–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*

–í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–∞–Ω—ã —Ç–æ—á–∫–∏:
‚Ä¢ A(1,2,3)
‚Ä¢ B(4,5,6)
‚Ä¢ C(7,8,9)

–ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ ABC.""",
        "answer": "7",
        "hints": [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
            "S = ¬Ω|AB √ó AC|",
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ñ–æ—Ä–º—É–ª—É –¥–ª–∏–Ω—ã –≤–µ–∫—Ç–æ—Ä–∞"
        ],
        "solution": """1) AB = (3,3,3)
2) AC = (6,6,6)
3) AB √ó AC = (0,0,0)
4) S = ¬Ω * ‚àö(0¬≤ + 0¬≤ + 0¬≤) = 7"""
    }
]


async def format_task_message(problem: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π"""
    difficulty_map = {
        1: "üü¢ –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
        2: "üü° –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å",
        3: "üî¥ –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
    }

    topic_icon = TOPIC_ICONS.get(problem['topic'], "üìö")
    difficulty = difficulty_map.get(problem['complexity'], "‚ö™ –ù–µ —É–∫–∞–∑–∞–Ω–∞")

    header = f"{'‚ú®' * 20}\n"
    footer = f"\n{'‚ú®' * 20}"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞
    answer_format_hint = {
        "integer": "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
        "float": "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ)",
        "trig": "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚àö2/2 –∏–ª–∏ 0.707)",
        "string": "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
    }.get(problem.get('answer_type', 'string'), "")

    message = (
        f"{header}"
        f"{topic_icon} *{problem['topic']}*\n"
        f"üìö {problem['exam_type']} {problem['level']}\n"
        f"üìä {difficulty}\n\n"
        f"{problem['text']}\n"
        f"{footer}\n\n"
        f"üí° –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: _{answer_format_hint}_\n"
        f"‚ùì –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hint"
    )
    return message


def get_problem(exam_type: str, level: str) -> dict:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    suitable_problems = [
        p for p in geometry_problems
        if p["exam_type"].lower() == exam_type.lower() and
           p["level"].lower() == level.lower()
    ]
    return random.choice(suitable_problems) if suitable_problems else None


async def format_stats_message(stats: dict) -> str:
    total_attempts = stats['total_attempts']
    solved = stats['solved']
    accuracy = stats['accuracy']
    level = stats['level']
    rank = stats['rank']
    progress = max(0, stats['progress'])

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar_length = 10
    filled = int(progress * progress_bar_length / 100)
    progress_bar = "‚ñ∞" * filled + "‚ñ±" * (progress_bar_length - filled)

    stats_message = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"{rank}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {level} {progress_bar} {progress}%\n\n"
        f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: `{total_attempts}`\n"
        f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: `{solved}`\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: `{accuracy}%`\n\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if accuracy >= 90:
        stats_message += "üåü _–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!_\n"
    elif accuracy >= 80:
        stats_message += "‚ú® _–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!_\n"
    elif accuracy >= 70:
        stats_message += "üí´ _–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!_\n"
    else:
        stats_message += "üí™ _–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!_\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–≤–∞–Ω–∏–∏
    next_ranks = {
        "üå± –ù–æ–≤–∏—á–æ–∫": ("üìö –£—á–µ–Ω–∏–∫", "—Ä–µ—à–∏—Ç–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞—á"),
        "üìö –£—á–µ–Ω–∏–∫": ("üéØ –ü—Ä–∞–∫—Ç–∏–∫", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 70%"),
        "üéØ –ü—Ä–∞–∫—Ç–∏–∫": ("üí´ –ó–Ω–∞—Ç–æ–∫", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 75%"),
        "üí´ –ó–Ω–∞—Ç–æ–∫": ("üèÜ –ú–∞—Å—Ç–µ—Ä", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 80%"),
        "üèÜ –ú–∞—Å—Ç–µ—Ä": ("üëë –ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 85%"),
        "üëë –ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä": ("‚≠ê –õ–µ–≥–µ–Ω–¥–∞", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 90%"),
        "‚≠ê –õ–µ–≥–µ–Ω–¥–∞": ("üåü –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 95%"),
    }

    if rank in next_ranks:
        next_rank, requirement = next_ranks[rank]
        stats_message += f"\nüìà –î–æ –∑–≤–∞–Ω–∏—è {next_rank}: {requirement}"

    return stats_message


async def format_achievements_message(achievements: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
    if not achievements:
        return (
            "üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            "–†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, —Ä–µ—à–∏–≤ –æ–¥–Ω—É –∑–∞–¥–∞—á—É."
        )

    message = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
    for ach in achievements:
        date = datetime.fromisoformat(ach['obtained_at']).strftime("%d.%m.%Y")
        message += (
            f"{ach['icon']} *{ach['name']}*\n"
            f"‚îî _{ach['description']}_\n"
            f"‚îî –ü–æ–ª—É—á–µ–Ω–æ: `{date}`\n\n"
        )
    return message


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Math Bot!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n\n"
        "üîπ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞\n"
        "üîπ –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏\n"
        "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n"
        "üîπ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "–ù–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é! üëá"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=main_menu)


@router.message(lambda message: message.text == "üìù –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω")
async def choose_exam(message: types.Message, state: FSMContext):
    try:
        logger.info(f"User {message.from_user.id} choosing exam")
        await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(UserState.choosing_exam)
        await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:", reply_markup=exam_menu)
    except Exception as e:
        logger.error(f"Error in choose_exam: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)


@router.message(UserState.choosing_exam)
async def process_exam_choice(message: types.Message, state: FSMContext):
    try:
        if message.text not in ["üìö –ï–ì–≠", "üìñ –û–ì–≠"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ï–ì–≠ –∏–ª–∏ –û–ì–≠", reply_markup=exam_menu)
            return

        logger.info(f"User {message.from_user.id} selected exam: {message.text}")
        exam_type = message.text
        await state.update_data(exam_type=exam_type)

        if exam_type == "üìñ –û–ì–≠":
            await state.update_data(level="–±–∞–∑–∞")
            logger.info(f"User {message.from_user.id} state data: {await state.get_data()}")
            await state.set_state(UserState.solving_task)
            await message.answer(
                "‚úÖ –í—ã–±—Ä–∞–Ω –û–ì–≠ (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å).\n–ù–∞–∂–º–∏—Ç–µ '‚ú® –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!",
                reply_markup=main_menu
            )
        else:
            await state.set_state(UserState.choosing_level)
            await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_menu)
    except Exception as e:
        logger.error(f"Error in process_exam_choice: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)


@router.message(UserState.choosing_level)
async def process_level_choice(message: types.Message, state: FSMContext):
    try:
        if message.text not in ["üìò –ë–∞–∑–∞", "üìó –ü—Ä–æ—Ñ–∏–ª—å"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–∞–∑–∞' –∏–ª–∏ '–ü—Ä–æ—Ñ–∏–ª—å'", reply_markup=level_menu)
            return

        logger.info(f"User {message.from_user.id} selected level: {message.text}")
        level = message.text.lower()
        data = await state.get_data()
        exam_type = data.get('exam_type', 'üìö –ï–ì–≠')

        await state.update_data(level=level)
        logger.info(f"User {message.from_user.id} state data: {await state.get_data()}")
        await state.set_state(UserState.solving_task)
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω {exam_type} ({level}).\n–ù–∞–∂–º–∏—Ç–µ '‚ú® –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!",
            reply_markup=main_menu
        )
    except Exception as e:
        logger.error(f"Error in process_level_choice: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu)


@router.message(lambda message: message.text == "‚ú® –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É")
async def send_task(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        logger.info(f"User {message.from_user.id} requesting task")
        data = await state.get_data()

        exam_type = data.get('exam_type')
        level = data.get('level')

        if not exam_type or not level:
            await message.answer(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞!",
                reply_markup=main_menu,
                parse_mode="Markdown"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        problem = get_problem(exam_type, level)

        if not problem:
            await message.answer(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞.",
                reply_markup=main_menu,
                parse_mode="Markdown"
            )
            logger.error(f"No problem found for exam_type={exam_type}, level={level}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_problem=problem)
        await state.set_state(UserState.solving_task)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task_message = await format_task_message(problem)
        await message.answer(
            task_message,
            reply_markup=main_menu,
            parse_mode="Markdown"
        )

        logger.info(f"Sent problem {problem.get('id', 'unknown')} to user {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in send_task: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu,
            parse_mode="Markdown"
        )


@router.message(lambda message: message.text == "üí° –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω –∏ —É—Ä–æ–≤–µ–Ω—å.\n"
        "2. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–∞–π—Ç–µ –∏—Ö.\n"
        "3. *–§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*\n"
        "   - –ß–∏—Å–ª–∞: **5**, **3.14**\n"
        "   - –î—Ä–æ–±–∏: **2/3**\n"
        "   - –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥—Ä–æ–±–∏: **0.33** (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ) –∏–ª–∏ **1/3**\n"
        "   - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–π: **1; -2**\n\n"
        "‚ùó –ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –û—Ç–≤–µ—Ç 0.3333... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 0.33 –∏–ª–∏ 1/3\n"
        "- –û—Ç–≤–µ—Ç 2.666... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 2.67 –∏–ª–∏ 8/3",
        parse_mode="Markdown"
    )


@router.message(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def go_back(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    current_state = await state.get_state()

    if current_state == UserState.choosing_level.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞
        await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:", reply_markup=exam_menu)
        await state.set_state(UserState.choosing_exam)
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"User {message.from_user.id} requested stats")
        stats = get_user_stats(message.from_user.id)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress = min(100, stats.get('progress', 0))
        progress_bar_length = 10
        filled = int(progress * progress_bar_length / 100)
        progress_bar = "‚ñ∞" * filled + "‚ñ±" * (progress_bar_length - filled)

        stats_message = (
            f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"{stats.get('rank', 'üå± –ù–æ–≤–∏—á–æ–∫')}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {stats.get('level', 1)} {progress_bar} {progress}%\n\n"
            f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: `{stats.get('total_attempts', 0)}`\n"
            f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: `{stats.get('solved', 0)}`\n"
            f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: `{stats.get('accuracy', 0)}%`\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        accuracy = stats.get('accuracy', 0)
        if accuracy >= 90:
            stats_message += "üåü _–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!_\n"
        elif accuracy >= 80:
            stats_message += "‚ú® _–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!_\n"
        elif accuracy >= 70:
            stats_message += "üí´ _–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!_\n"
        else:
            stats_message += "üí™ _–ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!_\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞–Ω–≥–µ
        ranks = {
            "üå± –ù–æ–≤–∏—á–æ–∫": ("üìö –£—á–µ–Ω–∏–∫", "—Ä–µ—à–∏—Ç–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞—á"),
            "üìö –£—á–µ–Ω–∏–∫": ("üéØ –ü—Ä–∞–∫—Ç–∏–∫", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 70%"),
            "üéØ –ü—Ä–∞–∫—Ç–∏–∫": ("üí´ –ó–Ω–∞—Ç–æ–∫", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 75%"),
            "üí´ –ó–Ω–∞—Ç–æ–∫": ("üèÜ –ú–∞—Å—Ç–µ—Ä", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 80%"),
            "üèÜ –ú–∞—Å—Ç–µ—Ä": ("üëë –ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 85%"),
            "üëë –ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä": ("‚≠ê –õ–µ–≥–µ–Ω–¥–∞", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 90%"),
            "‚≠ê –õ–µ–≥–µ–Ω–¥–∞": ("üåü –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä", "–¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 95%"),
        }

        current_rank = stats.get('rank', "üå± –ù–æ–≤–∏—á–æ–∫")
        if current_rank in ranks:
            next_rank, requirement = ranks[current_rank]
            stats_message += f"\nüìà –î–æ –∑–≤–∞–Ω–∏—è {next_rank}: {requirement}"

        logger.info(f"Sending stats to user {message.from_user.id}: {stats}")
        await message.answer(stats_message, parse_mode="Markdown", reply_markup=main_menu)

    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu
        )


@router.message(lambda message: message.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        achievements = get_user_achievements(message.from_user.id)
        achievements_message = await format_achievements_message(achievements)
        await message.answer(achievements_message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error showing achievements: {e}")
        await message.answer(
            "üòî *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )


def normalize_number(value):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float
        num = float(value)
        # –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ int
        if num.is_integer():
            return int(num)
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º float —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return round(num, 4)
    except ValueError:
        return value


def check_answers_equality(user_answer: str, correct_answer: str, answer_type: str = "string") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
        user_answer = user_answer.strip()

        if answer_type == "integer":
            return int(user_answer) == int(correct_answer)

        elif answer_type == "float":
            return abs(float(user_answer) - float(correct_answer)) < 0.001

        elif answer_type == "trig":
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã
            user_answer = user_answer.replace(" ", "").lower()
            correct_answer = correct_answer.replace(" ", "").lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if user_answer == correct_answer:
                return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            try:
                if "‚àö" in correct_answer:
                    if "‚àö2/2" in correct_answer:
                        correct_value = 0.707
                    elif "‚àö3/2" in correct_answer:
                        correct_value = 0.866
                    else:
                        return user_answer == correct_answer

                    user_value = float(user_answer)
                    return abs(user_value - correct_value) < 0.01

                if "/" in correct_answer:
                    num, den = map(int, correct_answer.split("/"))
                    correct_value = num / den
                    user_value = float(user_answer)
                    return abs(user_value - correct_value) < 0.01

            except (ValueError, ZeroDivisionError):
                pass

            return False

        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - —Å—Ç—Ä–æ–≥–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return user_answer == correct_answer

    except Exception as e:
        logger.error(f"Error in check_answers_equality: {e}")
        return False


@router.message(UserState.solving_task)
async def check_answer(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if message.text in ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "üí° –ü–æ–º–æ—â—å", "üìù –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω", "üìö –¢–µ–º—ã"]:
            if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                await show_stats(message)
            elif message.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
                await show_achievements(message)
            elif message.text == "üí° –ü–æ–º–æ—â—å":
                await show_help(message)
            elif message.text == "üìù –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω":
                await choose_exam(message, state)
            elif message.text == "üìö –¢–µ–º—ã":
                await show_topics(message)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        data = await state.get_data()
        problem = data.get('current_problem')

        if not problem:
            await message.answer(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞—á—É!",
                reply_markup=main_menu,
                parse_mode="Markdown"
            )
            return

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answer = message.text.strip().replace(',', '.')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
        is_correct = check_answers_equality(
            user_answer,
            problem['answer'],
            problem.get('answer_type', 'string')
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        update_user_stats(message.from_user.id, is_correct)

        if is_correct:
            await message.answer(
                "‚ú® *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
                "_–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!_",
                parse_mode="Markdown",
                reply_markup=main_menu
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new_achievements = check_achievements(message.from_user.id)
            if new_achievements:
                achievements_text = (
                    "üéâ *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
                )
                for ach in new_achievements:
                    achievements_text += f"{ach['icon']} *{ach['name']}*\n‚îî _{ach['description']}_\n\n"
                await message.answer(
                    achievements_text,
                    parse_mode="Markdown"
                )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
            format_hint = {
                "integer": "—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
                "float": "—á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π",
                "trig": "—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚àö2/2) –∏–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å",
                "string": "–æ—Ç–≤–µ—Ç"
            }.get(problem.get('answer_type', 'string'), "–æ—Ç–≤–µ—Ç")

            await message.answer(
                f"‚ùå *–ù–µ–≤–µ—Ä–Ω–æ*\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: `{user_answer}`\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{problem['answer']}`\n\n"
                f"üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:*\n{problem['hint']}\n\n"
                f"üìù –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: _{format_hint}_",
                parse_mode="Markdown",
                reply_markup=main_menu
            )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await show_stats(message)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        await send_task(message, state)

    except Exception as e:
        logger.error(f"Error in check_answer: {e}")
        await message.answer(
            "‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞*\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "üîπ –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: `42`\n"
            "üîπ –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞: `3.14`\n"
            "üîπ –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è: `‚àö2/2` –∏–ª–∏ `0.707`\n"
            "üîπ –î—Ä–æ–±–∏: `1/2`",
            parse_mode="Markdown",
            reply_markup=main_menu
        )


ege_10_tasks = {
    "easy": [
        "–ü—Ä–æ—Å—Ç—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è (a^x = b)",
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞",
        "–°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç–µ–ø–µ–Ω–µ–π",
        "–ü—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (sin, cos)"
    ],

    "medium": [
        "–õ–æ–≥–∞—Ä–∏—Ñ–º—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞)",
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ–¥–Ω–∏–º –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º",
        "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã",
        "–§–æ—Ä–º—É–ª—ã –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è"
    ],

    "hard": [
        "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –±–µ–∑ –∑–∞–º–µ–Ω",
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞",
        "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–∏–¥–æ–≤",
        "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"
    ]
}


async def send_hint(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏"""
    data = await state.get_data()
    problem = data.get('current_problem')

    if not problem:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞—á—É!")
        return

    hints = problem.get('hints', [])
    current_hint = data.get('current_hint', 0)

    if not hints:
        await message.answer("–ö —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ üòî")
        return

    if current_hint >= len(hints):
        await message.answer(
            "‚ùó –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—É—é!"
        )
        return

    hint_message = (
        f"üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞ {current_hint + 1}/{len(hints)}:*\n\n"
        f"{hints[current_hint]}"
    )

    await state.update_data(current_hint=current_hint + 1)
    await message.answer(hint_message, parse_mode="Markdown")


@router.message(Command("hint"))
async def cmd_hint(message: types.Message, state: FSMContext):
    await send_hint(message, state)


@router.message(Command("solution"))
async def cmd_solution(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    data = await state.get_data()
    problem = data.get('current_problem')

    if not problem:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞—á—É!")
        return

    solution = problem.get('solution')
    if not solution:
        await message.answer("–ö —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –Ω–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è üòî")
        return

    solution_message = (
        f"üìù *–†–µ—à–µ–Ω–∏–µ:*\n\n"
        f"{solution}\n\n"
        f"‚ùó –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ä–µ—à–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É!"
    )

    await message.answer(solution_message, parse_mode="Markdown")


@router.message(lambda message: message.text == "üìö –¢–µ–º—ã")
async def show_topics(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:",
        reply_markup=topics_menu
    )


@router.message(lambda message: message.text.endswith("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
async def return_to_main_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu
    )