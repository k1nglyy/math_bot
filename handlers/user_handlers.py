from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.database import (
    get_random_problem,
    update_user_stats,
    get_user_stats,
    get_user_achievements,
    check_achievements
)
import logging
from datetime import datetime
from typing import List, Dict

router = Router()
logger = logging.getLogger(__name__)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéì –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω"), KeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

exam_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ï–ì–≠"), KeyboardButton(text="–û–ì–≠")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

level_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–∞–∑–∞"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


class UserState(StatesGroup):
    choosing_exam = State()
    choosing_level = State()
    solving_task = State()


async def format_task_message(problem: dict) -> str:
    topic_icons = {
        "–ê–ª–≥–µ–±—Ä–∞": "üìê",
        "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "üìè",
        "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π": "üé≤",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìä"
    }

    difficulty_stars = "‚≠ê" * problem["complexity"]
    topic_icon = topic_icons.get(problem["topic"], "üìö")

    message = (
        f"{topic_icon} *{problem['topic']}* ({problem['exam_type']}, {problem['level']})\n"
        f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_stars}\n\n"
        f"{problem['text']}\n\n"
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
    )
    return message


async def format_stats_message(stats: dict) -> str:
    accuracy = stats.get("accuracy", 0)
    accuracy_icon = "üéØ" if accuracy >= 90 else "üé™" if accuracy >= 70 else "üé±"

    message = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: `{stats['total_attempts']}`\n"
        f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: `{stats['solved']}`\n"
        f"{accuracy_icon} –¢–æ—á–Ω–æ—Å—Ç—å: `{accuracy}%`\n\n"
        f"üí´ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    )
    return message


async def format_achievements_message(achievements: List[Dict]) -> str:
    if not achievements:
        return (
            "üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            "–†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, —Ä–µ—à–∏–≤ –æ–¥–Ω—É –∑–∞–¥–∞—á—É."
        )

    message = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
    for ach in achievements:
        date = datetime.fromisoformat(ach['obtained_at']).strftime("%d.%m.%Y")
        message += (
            f"{ach['icon']} *{ach['name']}*\n"
            f"‚îî _{ach['description']}_\n"
            f"‚îî –ü–æ–ª—É—á–µ–Ω–æ: `{date}`\n\n"
        )
    return message


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Math Bot!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n\n"
        "üîπ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞\n"
        "üîπ –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏\n"
        "üîπ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n"
        "üîπ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "–ù–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é! üëá"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=main_menu)


@router.message(lambda message: message.text == "üéì –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω")
async def choose_exam(message: types.Message, state: FSMContext):
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:", reply_markup=exam_menu)
    await state.set_state(UserState.choosing_exam)


@router.message(lambda message: message.text in ["–ï–ì–≠", "–û–ì–≠"], UserState.choosing_exam)
async def set_exam(message: types.Message, state: FSMContext):
    exam_type = "–ï–ì–≠" if message.text == "–ï–ì–≠" else "–û–ì–≠"
    await state.update_data(exam_type=exam_type)

    if exam_type == "–û–ì–≠":
        await state.update_data(level="–±–∞–∑–∞")
        await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω –û–ì–≠ (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å).\n–ù–∞–∂–º–∏—Ç–µ 'üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!", reply_markup=main_menu)
        await state.set_state(UserState.solving_task)
    else:
        await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=level_menu)
        await state.set_state(UserState.choosing_level)


@router.message(lambda message: message.text in ["–ë–∞–∑–∞", "–ü—Ä–æ—Ñ–∏–ª—å"], UserState.choosing_level)
async def set_level(message: types.Message, state: FSMContext):
    level = message.text.lower()
    await state.update_data(level=level)
    data = await state.get_data()
    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω {data['exam_type']} ({level}).\n–ù–∞–∂–º–∏—Ç–µ 'üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'!",
        reply_markup=main_menu
    )
    await state.set_state(UserState.solving_task)


@router.message(lambda message: message.text == "üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É")
async def send_task(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        exam_type = data.get('exam_type')
        level = data.get('level')

        if not exam_type or not level:
            await message.answer(
                "‚ö†Ô∏è *–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞!*\n\n"
                "–ù–∞–∂–º–∏—Ç–µ 'üéì –í—ã–±—Ä–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω'",
                parse_mode="Markdown"
            )
            return

        problem = get_random_problem(exam_type, level)
        if not problem:
            await message.answer(
                "üòî *–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∑–∞–¥–∞—á—É.*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞.",
                parse_mode="Markdown"
            )
            return

        await state.update_data(current_problem=problem)
        task_message = await format_task_message(problem)
        await message.answer(task_message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error sending task: {e}")
        await message.answer(
            "üòî *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –µ—â–µ —Ä–∞–∑.",
            parse_mode="Markdown"
        )


@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω –∏ —É—Ä–æ–≤–µ–Ω—å.\n"
        "2. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–µ—à–∞–π—Ç–µ –∏—Ö.\n"
        "3. *–§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:*\n"
        "   - –ß–∏—Å–ª–∞: **5**, **3.14**\n"
        "   - –î—Ä–æ–±–∏: **2/3**\n"
        "   - –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –¥—Ä–æ–±–∏: **0.33** (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ) –∏–ª–∏ **1/3**\n"
        "   - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–π: **1; -2**\n\n"
        "‚ùó –ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –û—Ç–≤–µ—Ç 0.3333... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 0.33 –∏–ª–∏ 1/3\n"
        "- –û—Ç–≤–µ—Ç 2.666... ‚Üí –≤–≤–µ–¥–∏—Ç–µ 2.67 –∏–ª–∏ 8/3",
        parse_mode="Markdown"
    )


@router.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == UserState.choosing_level.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞
        await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω:", reply_markup=exam_menu)
        await state.set_state(UserState.choosing_exam)
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    try:
        stats = get_user_stats(message.from_user.id)
        stats_message = await format_stats_message(stats)
        await message.answer(stats_message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(lambda message: message.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: types.Message):
    try:
        achievements = get_user_achievements(message.from_user.id)
        achievements_message = await format_achievements_message(achievements)
        await message.answer(achievements_message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error showing achievements: {e}")
        await message.answer(
            "üòî *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )


def normalize_number(value):
    try:
        num = float(value)
        if num.is_integer():
            return int(num)
        return round(num, 4)
    except ValueError:
        return value


def check_answers_equality(user_answer, correct_answer, problem_type):
    try:
        if ";" in str(correct_answer):
            user_parts = [p.strip() for p in str(user_answer).split(";")]
            correct_parts = [p.strip() for p in str(correct_answer).split(";")]

            if len(user_parts) != len(correct_parts):
                return False
            user_parts = sorted([normalize_number(p) for p in user_parts])
            correct_parts = sorted([normalize_number(p) for p in correct_parts])
            for u, c in zip(user_parts, correct_parts):
                if not check_single_answer(u, c, problem_type):
                    return False
            return True
        return check_single_answer(user_answer, correct_answer, problem_type)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False


def check_single_answer(user_value, correct_value, problem_type):
    try:
        user_num = normalize_number(user_value)
        correct_num = normalize_number(correct_value)
        if isinstance(user_num, (int, float)) and isinstance(correct_num, (int, float)):
            tolerance = {
                "–ì–µ–æ–º–µ—Ç—Ä–∏—è": 0.1,
                "–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π": 0.01,
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": 0.01
            }.get(problem_type, 0.01)

            return abs(float(user_num) - float(correct_num)) <= tolerance
        return str(user_value).strip().lower() == str(correct_value).strip().lower()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False


@router.message(UserState.solving_task)
async def check_answer(message: types.Message, state: FSMContext):
    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats = get_user_stats(message.from_user.id)
        stats_message = await format_stats_message(stats)
        await message.answer(stats_message, parse_mode="Markdown")
        return

    try:
        data = await state.get_data()
        problem = data.get('current_problem')
        if not problem:
            await message.answer(
                "‚ö†Ô∏è *–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–¥–∞—á—É!*\n\n"
                "–ù–∞–∂–º–∏—Ç–µ 'üìö –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É'",
                parse_mode="Markdown"
            )
            return

        user_answer = message.text.strip().replace(',', '.')
        is_correct = check_answers_equality(user_answer, problem['answer'], problem['topic'])
        update_user_stats(message.from_user.id, is_correct)

        if is_correct:
            await message.answer(
                "‚ú® *–û—Ç–ª–∏—á–Ω–æ!* –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ\n\n"
                "_–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!_",
                parse_mode="Markdown"
            )
        else:
            hint_text = (
                f"‚ùå *–ù–µ–≤–µ—Ä–Ω–æ*\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: `{user_answer}`\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: `{problem['answer']}`\n\n"
                f"üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:*\n{problem['hint']}"
            )
            await message.answer(hint_text, parse_mode="Markdown")
        new_achievements = check_achievements(message.from_user.id)
        if new_achievements:
            achievements_text = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                "*–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
            )
            for ach in new_achievements:
                achievements_text += f"{ach['icon']} *{ach['name']}*\n‚îî _{ach['description']}_\n\n"
            await message.answer(achievements_text, parse_mode="Markdown")
        stats = get_user_stats(message.from_user.id)
        stats_message = await format_stats_message(stats)
        await message.answer(stats_message, parse_mode="Markdown")
        await send_task(message, state)
    except Exception as e:
        logger.error(f"Error checking answer: {e}")
        await message.answer(
            "‚ö†Ô∏è *–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:*\n\n"
            "üîπ –¶–µ–ª—ã–µ —á–∏—Å–ª–∞: `50`\n"
            "üîπ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏: `50.24`\n"
            "üîπ –î—Ä–æ–±–∏: `1/2`\n"
            "üîπ –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤: `2; -5`\n"
            "üîπ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: `0.5` –∏–ª–∏ `1/2`",
            parse_mode="Markdown"
        )