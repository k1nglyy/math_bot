from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.database import get_random_problem

router = Router()


class UserState(StatesGroup):
    choosing_exam = State()
    choosing_level = State()
    solving_task = State()


@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø MathExamBot. –í—ã–±–µ—Ä–∏ —ç–∫–∑–∞–º–µ–Ω:\n"
        "/ege - –ï–ì–≠\n/oge - –û–ì–≠"
    )
    await state.set_state(UserState.choosing_exam)


@router.message(Command("ege"), UserState.choosing_exam)
async def set_ege(message: types.Message, state: FSMContext):
    await state.update_data(exam_type="–ï–ì–≠")
    await message.answer("–í—ã–±—Ä–∞–Ω –ï–ì–≠. –£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å:\n/base - –ë–∞–∑–∞\n/profile - –ü—Ä–æ—Ñ–∏–ª—å")
    await state.set_state(UserState.choosing_level)


@router.message(Command("oge"), UserState.choosing_exam)
async def set_oge(message: types.Message, state: FSMContext):
    await state.update_data(exam_type="–û–ì–≠")
    await message.answer("–í—ã–±—Ä–∞–Ω –û–ì–≠. –£—Ä–æ–≤–µ–Ω—å: –±–∞–∑–∞. –ù–∞–∂–º–∏ /task")
    await state.set_state(UserState.solving_task)


@router.message(Command("base"), UserState.choosing_level)
async def set_base(message: types.Message, state: FSMContext):
    await state.update_data(level="–±–∞–∑–∞")
    data = await state.get_data()
    await message.answer(f"–≠–∫–∑–∞–º–µ–Ω: {data['exam_type']}, —É—Ä–æ–≤–µ–Ω—å: –±–∞–∑–∞. /task")
    await state.set_state(UserState.solving_task)


@router.message(Command("profile"), UserState.choosing_level)
async def set_profile(message: types.Message, state: FSMContext):
    await state.update_data(level="–ø—Ä–æ—Ñ–∏–ª—å")
    data = await state.get_data()
    await message.answer(f"–≠–∫–∑–∞–º–µ–Ω: {data['exam_type']}, —É—Ä–æ–≤–µ–Ω—å: –ø—Ä–æ—Ñ–∏–ª—å. /task")
    await state.set_state(UserState.solving_task)


@router.message(Command("task"), UserState.solving_task)
async def send_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    problem = get_random_problem(data['exam_type'], data.get('level', '–±–∞–∑–∞'))

    if problem:
        await state.update_data(current_problem=problem)
        await message.answer(
            f"**{problem['topic']}**\n{problem['text']}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ /hint"
        )
    else:
        await message.answer("üò¢ –ó–∞–¥–∞—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")


@router.message(Command("hint"), UserState.solving_task)
async def send_hint(message: types.Message, state: FSMContext):
    data = await state.get_data()
    problem = data.get('current_problem')
    if problem:
        await message.answer(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {problem['hint']}")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–¥–∞—á—É /task")


@router.message(UserState.solving_task)
async def check_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    problem = data.get('current_problem')

    if not problem:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–¥–∞—á—É /task")
        return

    if message.text.strip() == problem['answer']:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! +10 –±–∞–ª–ª–æ–≤.")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {problem['answer']}")

    await send_task(message, state)